{"version":3,"sources":["Api.js","MessageList.js","App.js","serviceWorker.js","index.js"],"names":["MESSAGE_PATH","Api","fetch","response","json","message","method","MessageList","state","messages","sendMessage","bind","getMessages","this","setState","prompt","postMessage","refresh","setInterval","messageElements","forEach","i","date","Date","timestamp","push","key","toString","className","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8OAAMA,EAAe,sEAgBNC,E,2OAZYC,MAAMF,G,cAAvBG,E,gBACOA,EAASC,O,oNAGCC,G,uFACAH,MAAM,GAAD,OAAIF,EAAJ,oBAA4BK,GAAW,CACjEC,OAAQ,S,cADJH,E,gBAGOA,EAASC,O,iJC4CXG,E,kDAlDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAU,IAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANP,E,sLAUWV,EAAIW,c,OAArBH,E,OACNI,KAAKC,SAAS,CACZL,SAAUA,I,iQAKNJ,EAAUU,OAAO,iB,SACjBd,EAAIe,YAAYX,G,OACtBQ,KAAKI,U,gJAGc,IAAD,OAClBJ,KAAKI,UACLC,aAAY,WACV,EAAKD,YA5Ba,O,+BAiCpB,IAAIE,EAAkB,GAWtB,OAVAN,KAAKL,MAAMC,SAASW,SAAQ,SAACf,EAASgB,GACpC,IAAMC,EAAO,IAAIC,KAAKlB,EAAQmB,WAC9BL,EAAgBM,KACd,uBAAGC,IAAKL,GACN,2BAAKC,EAAKK,WAAV,KACEtB,EAAQA,aAMd,yBAAKuB,UAAU,gBACXT,EACF,4BAAQU,QAAShB,KAAKH,aAAtB,qB,GA7CkBoB,aCMXC,MARf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,EAAD,QCMcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3C,c","file":"static/js/main.da8ff899.chunk.js","sourcesContent":["const MESSAGE_PATH = 'https://2a0jyll2t9.execute-api.us-east-1.amazonaws.com/poc/messages';\n\nclass Api {\n  static async getMessages() {\n    const response = await fetch(MESSAGE_PATH);\n    return await response.json();\n  }\n\n  static async postMessage(message) {\n    const response = await fetch(`${MESSAGE_PATH}?message=${message}`, {\n      method: 'POST'\n    });\n    return await response.json();\n  }\n}\n\nexport default Api;\n","import React, { Component } from 'react';\nimport Api from './Api';\n\nconst REFRESH_TIMEOUT = 4000;\n\nclass MessageList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: []\n    };\n\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  async refresh() {\n    const messages = await Api.getMessages();\n    this.setState({\n      messages: messages\n    });\n  }\n\n  async sendMessage() {\n    const message = prompt('Say something');\n    await Api.postMessage(message);\n    this.refresh();\n  }\n\n  componentDidMount() {\n    this.refresh();\n    setInterval(() => {\n      this.refresh();\n    }, REFRESH_TIMEOUT);\n  }\n\n  render() {\n    var messageElements = [];\n    this.state.messages.forEach((message, i) => {\n      const date = new Date(message.timestamp);\n      messageElements.push(\n        <p key={i}>\n          <b>{ date.toString() } </b>\n          { message.message }\n        </p>\n      );\n    });\n\n    return (\n      <div className=\"Message-list\">\n        { messageElements }\n        <button onClick={this.sendMessage}>Send Message</button>\n      </div>\n    );\n  }\n}\n\nexport default MessageList;\n","import React from 'react';\nimport MessageList from './MessageList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MessageList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}