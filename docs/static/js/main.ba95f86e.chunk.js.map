{"version":3,"sources":["Utils.js","UserProfile.js","Header/HeaderState.js","Header/RegisterForm.js","Header/LoginForm.js","Header/UserMenu.js","Header/Header.js","Api.js","CpProblem.js","SearchSelect.js","CpForm.js","CpNotes.js","App.js","serviceWorker.js","index.js"],"names":["Utils","component","stateObject","Promise","resolve","reject","setState","object","property","hasOwnProperty","password","confirmPassword","setError","length","UserProfile","Auth","currentAuthenticatedUser","profile","username","email","signUp","attributes","info","codeDeliveryDetails","Destination","code","confirmSignUp","resendSignUp","CodeDeliveryDetails","forgotPassword","forgotPasswordSubmit","signIn","signOut","loadProfile","HeaderState","Object","freeze","LOGIN","RECOVERY_USERNAME","RECOVERY_PASSWORD","RECOVERY_SUCCESS","REGISTER","REGISTER_VERIFY","REGISTER_SUCCESS","RegisterForm","props","screen","unverifiedAccountUsername","state","error","success","destination","unverifiedAccountDestination","close","bind","register","verifyEmail","resendVerificationEmail","this","exitCallback","message","startsWith","substring","setStatePromise","event","preventDefault","form","target","value","checkPasswords","setSuccess","currentForm","createAccountForm","className","onSubmit","htmlFor","autoComplete","type","name","id","verifyEmailForm","key","onClick","emailVerifiedBox","Component","LoginForm","login","enablePasswordRecovery","resetPassword","emailVerificationCallback","loginForm","recoveryUsernameForm","recoveryPasswordForm","recoveryPasswordSuccess","UserMenu","logout","logoutCallback","Header","showRegisterForm","showLoginForm","showUserMenu","refreshUsername","toggleRegisterForm","toggleLoginForm","toggleUserMenu","afterLogin","unverifiedAccount","getUsername","loggedIn","loginButtons","loggedInButton","tabIndex","onBlur","topRightButtons","Api","localStorage","setItem","JSON","stringify","problems","path","fetch","response","json","platform","fakeResponse","i","push","Math","random","problem","fakeUuid","Date","getTime","_updateStorage","window","parse","getItem","SOLVED_CLASS","CpProblem","showNotes","toggleNotes","showHide","solved","title","href","link","notes","SearchSelect","searchTerm","previousValidSearchTerm","showOptions","options","filteredOptions","handleChange","handleBlur","handleFocus","handleOptionSelect","option","optionStringArray","keys","join","prevProps","searchKey","search","newSearchTerm","toLowerCase","getOptionString","focusedElement","relatedTarget","sortKey","optionString","callback","optionElements","onChange","onFocus","disabled","CpForm","problemSortKey","handlePlatformChange","updateProblemSortKey","addProblem","disableForm","defaultValue","getProblems","CpNotes","showForm","toggleForm","uuid","updatedProblems","MathJax","typesetPromise","problemElements","isEmpty","App","Boolean","location","hostname","match","Amplify","configure","amplify_config","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.ba95f86e.chunk.js","sourcesContent":["const MIN_PASSWORD_LENGTH = 6;\n\nclass Utils {\n  static async setStatePromise(component, stateObject) {\n    return new Promise((resolve, reject) => {\n      component.setState(stateObject, () => {\n        resolve();\n      });\n    });\n  }\n\n  static isEmpty(object) {\n    for(const property in object) {\n      if(object.hasOwnProperty(property))\n        return false;\n    }\n    return true;\n  }\n\n  static async checkPasswords(component, password, confirmPassword) {\n    if(password !== confirmPassword) {\n      await component.setError(\"Your passwords don't match!\");\n      return false;\n    }\n\n    if(password.length < MIN_PASSWORD_LENGTH) {\n      await component.setError(\"Your password is too short!\");\n      return false;\n    }\n\n    return true;\n  }\n}\n\nexport default Utils;\n","import { Auth } from 'aws-amplify';\n\nclass UserProfile {\n  static profile = null;\n\n  static async loadProfile() {\n    try {\n      UserProfile.profile = await Auth.currentAuthenticatedUser();\n    }\n    catch(err) {\n      // currentAuthenticatedUser() throws this error if the user is not logged in\n    }\n  }\n\n  static async register(username, email, password) {\n    const info = await Auth.signUp({\n      username,\n      password,\n      attributes: {\n        email: email\n      }\n    });\n\n    // I like how Amplify makes this one inconsistently lowercase... lol\n    return info.codeDeliveryDetails.Destination;\n  }\n\n  static async verifyEmail(username, code) {\n    await Auth.confirmSignUp(username, code);\n  }\n\n  static async resendVerificationEmail(username) {\n    const info = await Auth.resendSignUp(username);\n    return info.CodeDeliveryDetails.Destination;\n  }\n\n  static async forgotPassword(username) {\n    const info = await Auth.forgotPassword(username);\n    return info.CodeDeliveryDetails.Destination;\n  }\n\n  static async resetPassword(username, code, password) {\n    await Auth.forgotPasswordSubmit(username, code, password);\n  }\n\n  static async login(username, password) {\n    await Auth.signIn(username, password);\n  }\n\n  static async logout() {\n    await Auth.signOut();\n    UserProfile.profile = null;\n  }\n\n  static async getUsername() {\n    if(!UserProfile.profile)\n      await UserProfile.loadProfile();\n\n    if(!UserProfile.profile)\n      return null;\n\n    return UserProfile.profile.username;\n  }\n}\n\nexport default UserProfile;\n","const HeaderState = Object.freeze({\n  LOGIN: 0,\n  RECOVERY_USERNAME: 1,\n  RECOVERY_PASSWORD: 2,\n  RECOVERY_SUCCESS: 3,\n  REGISTER: 4,\n  REGISTER_VERIFY: 5,\n  REGISTER_SUCCESS: 6\n});\n\nexport default HeaderState;\n","import React, { Component } from 'react';\nimport Utils from '../Utils';\nimport UserProfile from '../UserProfile';\nimport HeaderState from './HeaderState';\nimport '../css/RegisterForm.css';\n\nconst USERNAME_MIN_LENGTH = 3;\nconst USERNAME_MAX_LENGTH = 20;\nconst ERROR_TRIGGER_PREFIX = 'PreSignUp failed with error';\n\nclass RegisterForm extends Component {\n  constructor(props) {\n    super(props);\n\n    const screen = props.unverifiedAccountUsername ?\n                   HeaderState.REGISTER_VERIFY : HeaderState.REGISTER;\n    this.state = {\n      error: '',\n      success: '',\n      username: props.unverifiedAccountUsername,\n      destination: props.unverifiedAccountDestination,\n      screen: screen\n    };\n\n    this.close = this.close.bind(this);\n    this.register = this.register.bind(this);\n    this.verifyEmail = this.verifyEmail.bind(this);\n    this.resendVerificationEmail = this.resendVerificationEmail.bind(this);\n  }\n\n  close() {\n    this.props.exitCallback();\n  }\n\n  async setError(message) {\n    if(message.startsWith(ERROR_TRIGGER_PREFIX)) {\n      message = message.substring(\n        ERROR_TRIGGER_PREFIX.length, message.length - 1\n      );\n    }\n\n    await Utils.setStatePromise(this, {\n      error: `Error: ${message}`,\n      success: ''\n    });\n  }\n\n  async setSuccess(message) {\n    await Utils.setStatePromise(this, {\n      error: '',\n      success: message\n    });\n  }\n\n  async register(event) {\n    event.preventDefault();\n\n    const form = event.target;\n    const username = form.username.value;\n    const email = form.email.value;\n    const password = form.password.value;\n    const confirmPassword = form.confirmPassword.value;\n\n    if(!username || !email || !password || !confirmPassword) {\n      await this.setError('Please fill out all of the fields.')\n      return;\n    }\n\n    if(username.length < USERNAME_MIN_LENGTH || username.length > USERNAME_MAX_LENGTH) {\n      await this.setError(\n        `Your username must be between ${USERNAME_MIN_LENGTH} ` +\n        `and ${USERNAME_MAX_LENGTH} characters!`\n      );\n      return;\n    }\n\n    const passwordsOk = await Utils.checkPasswords(this, password, confirmPassword);\n    if(!passwordsOk)\n      return;\n\n    try {\n      const destination = await UserProfile.register(username, email, password);\n      Utils.setStatePromise(this, {\n        error: '',\n        username: username,\n        destination: destination,\n        screen: HeaderState.REGISTER_VERIFY\n      });\n    }\n    catch(err) {\n      await this.setError(err.message);\n    }\n  }\n\n  async verifyEmail(event) {\n    event.preventDefault();\n\n    const code = event.target.code.value;\n    try {\n      await UserProfile.verifyEmail(this.state.username, code);\n      Utils.setStatePromise(this, {\n        error: '',\n        success: '',\n        screen: HeaderState.REGISTER_SUCCESS\n      });\n    }\n    catch(err) {\n      await this.setError(err.message);\n    }\n  }\n\n  async resendVerificationEmail(event) {\n    try {\n      await UserProfile.resendVerificationEmail(this.state.username);\n      await this.setSuccess('Another email has been sent!');\n    }\n    catch(err) {\n      await this.setError(err.message);\n    }\n  }\n\n  render() {\n    const createAccountForm = (\n      <div className=\"Register-form Module-popup\">\n        { this.state.error && <h2>{this.state.error}</h2> }\n        <h2>Create an account!</h2>\n        <form className=\"Askd-form\" onSubmit={this.register}>\n          <label htmlFor=\"register-username\">Username</label>\n          <input autoComplete=\"off\" type=\"text\" name=\"username\"\n                 id=\"register-username\" />\n\n          <label htmlFor=\"register-email\">Email</label>\n          <input autoComplete=\"off\" type=\"text\" name=\"email\"\n                 id=\"register-email\" />\n\n          <label htmlFor=\"register-password\">Password</label>\n          <input autoComplete=\"off\" type=\"password\" name=\"password\"\n                 id=\"register-password\" />\n\n          <label htmlFor=\"register-confirm-password\">Confirm password</label>\n          <input autoComplete=\"off\" type=\"password\" name=\"confirmPassword\"\n                 id=\"register-confirm-password\" />\n\n          <input className=\"Askd-button Module-popup-last\" type=\"submit\"\n                 value=\"Register\" />\n        </form>\n      </div>\n    );\n\n    const verifyEmailForm = (\n      <div className=\"Register-form Module-popup\">\n        { this.state.error && <h2>{this.state.error}</h2> }\n        { this.state.success && <h2>{this.state.success}</h2> }\n        <h2>Verify your email!</h2>\n        <p>\n          You should've received an email at {this.state.destination} with a\n          verification code. If it isn't convenient for you to verify your\n          account now, you may do so later by logging in.\n        </p>\n        <form className=\"Askd-form\" onSubmit={this.verifyEmail}>\n          <label htmlFor=\"verification-code\">Verification code</label>\n          <input autoComplete=\"off\" type=\"text\" name=\"code\"\n                 key=\"verification-code\" id=\"verification-code\" />\n\n          <div onClick={this.resendVerificationEmail} className=\"Askd-form-link\">\n            Didn't get the email? Click here to resend\n          </div>\n\n          <input className=\"Askd-button Module-popup-last\" type=\"submit\"\n                 value=\"Submit\" />\n        </form>\n      </div>\n    );\n\n    const emailVerifiedBox = (\n      <div className=\"Register-form Module-popup\">\n        <h2>Verification success!</h2>\n        <p className=\"Module-popup-last\">\n          Your email was successfully verified! Click the 'X' button in the\n          top-right corner to return to the site, and you'll be able to login.\n        </p>\n      </div>\n    );\n\n    var currentForm;\n    switch(this.state.screen) {\n      case HeaderState.REGISTER:\n        currentForm = createAccountForm;\n        break;\n      case HeaderState.REGISTER_VERIFY:\n        currentForm = verifyEmailForm;\n        break;\n      case HeaderState.REGISTER_SUCCESS:\n        currentForm = emailVerifiedBox;\n        break;\n      default:\n    }\n\n    return (\n      <div className=\"Module-blocker\">\n        <button onClick={this.close}\n                className=\"Askd-form-close Askd-button Askd-button-circular\">X</button>\n        { currentForm }\n      </div>\n    );\n  }\n}\n\nexport default RegisterForm;\n","import React, { Component } from 'react';\nimport Utils from '../Utils';\nimport UserProfile from '../UserProfile';\nimport HeaderState from './HeaderState';\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      error: '',\n      username: null,\n      destination: null,\n      screen: props.screen || HeaderState.LOGIN\n    }\n\n    this.close = this.close.bind(this);\n    this.login = this.login.bind(this);\n    this.enablePasswordRecovery = this.enablePasswordRecovery.bind(this);\n    this.forgotPassword = this.forgotPassword.bind(this);\n    this.resetPassword = this.resetPassword.bind(this);\n    this.resendVerificationEmail = this.resendVerificationEmail.bind(this);\n  }\n\n  close() {\n    this.props.exitCallback(false);\n  }\n\n  async setError(message) {\n    await Utils.setStatePromise(this, {\n      error: `Error: ${message}`\n    });\n  }\n\n  async setSuccess(message) {\n    await Utils.setStatePromise(this, {\n      error: '',\n      success: message\n    });\n  }\n\n  async login(event) {\n    event.preventDefault();\n\n    const form = event.target;\n    const username = form.username.value;\n    const password = form.password.value;\n\n    if(!username || !password)\n      await this.setError(\"Please fill out all of the fields.\")\n\n    try {\n      try {\n        await UserProfile.login(username, password);\n        this.props.exitCallback(true);\n      }\n      catch(err) {\n        if(err.code === 'UserNotConfirmedException') {\n          const destination = await UserProfile.resendVerificationEmail(username);\n          await this.props.emailVerificationCallback(username, destination);\n        }\n        else {\n          throw err;\n        }\n      }\n    }\n    catch(err) {\n      await this.setError(err.message);\n    }\n  }\n\n  async enablePasswordRecovery(event) {\n    await Utils.setStatePromise(this, {\n      error: '',\n      screen: HeaderState.RECOVERY_USERNAME\n    });\n  }\n\n  async forgotPassword(event) {\n    event.preventDefault();\n\n    const username = event.target.username.value;\n    if(!username) {\n      this.setError('Please input your username.');\n      return;\n    }\n\n    try {\n      const destination = await UserProfile.forgotPassword(username);\n      Utils.setStatePromise(this, {\n        error: '',\n        username: username,\n        destination: destination,\n        screen: HeaderState.RECOVERY_PASSWORD\n      });\n    }\n    catch(err) {\n      await this.setError(err.message);\n    }\n  }\n\n  async resetPassword(event) {\n    event.preventDefault();\n\n    const form = event.target;\n    const code = form.code.value;\n    const password = form.password.value;\n    const confirmPassword = form.confirmPassword.value;\n\n    if(!code || !password || !confirmPassword) {\n      this.setError('Please fill out all of the fields.');\n      return;\n    }\n\n    const passwordsOk = await Utils.checkPasswords(this, password, confirmPassword);\n    if(!passwordsOk)\n      return;\n\n    try {\n      await UserProfile.resetPassword(this.state.username, code, password);\n      await Utils.setStatePromise(this, {\n        error: '',\n        success: '',\n        screen: HeaderState.RECOVERY_SUCCESS\n      });\n    }\n    catch(err) {\n      await this.setError(err.message);\n    }\n  }\n\n  async resendVerificationEmail(event) {\n    try {\n      await UserProfile.forgotPassword(this.state.username);\n      await this.setSuccess('Another email has been sent!');\n    }\n    catch(err) {\n      await this.setError(err.message);\n    }\n  }\n\n  render() {\n    const loginForm = (\n      <div className=\"Register-form Module-popup\">\n        { this.state.error && <h2>{this.state.error}</h2> }\n        <h2>Login to your account!</h2>\n        <form className=\"Askd-form\" onSubmit={this.login}>\n          <label htmlFor=\"login-username\">Username or email</label>\n          <input autoComplete=\"off\" type=\"text\" name=\"username\"\n                 key=\"login-username\" id=\"login-username\" />\n\n          <label htmlFor=\"login-password\">Password</label>\n          <input autoComplete=\"off\" type=\"password\" name=\"password\"\n                 key=\"login-password\" id=\"login-password\" />\n\n          <div onClick={this.enablePasswordRecovery} className=\"Askd-form-link\">\n            Forgot your password?\n          </div>\n\n          <input className=\"Askd-button Module-popup-last\" type=\"submit\"\n                 value=\"Login\" />\n        </form>\n      </div>\n    );\n\n    const recoveryUsernameForm = (\n      <div className=\"Register-form Module-popup\">\n        { this.state.error && <h2>{this.state.error}</h2> }\n        <h2>Reset your password</h2>\n        <p>\n          Please provide your username or email, so that you can reset your\n          password via an emailed confirmation code.\n        </p>\n        <form className=\"Askd-form\" onSubmit={this.forgotPassword}>\n          <label htmlFor=\"reset-username\">Username or email</label>\n          <input autoComplete=\"off\" type=\"text\" name=\"username\"\n                 key=\"reset-username\" id=\"reset-username\" />\n\n          <input className=\"Askd-button Module-popup-last\" type=\"submit\"\n                 value=\"Submit\" />\n        </form>\n      </div>\n    );\n\n    const recoveryPasswordForm = (\n      <div className=\"Register-form Module-popup\">\n        { this.state.error && <h2>{this.state.error}</h2> }\n        { this.state.success && <h2>{this.state.success}</h2> }\n        <h2>Reset your password</h2>\n        <p>\n          You should've received an email at { this.state.destination } with a\n          verification code.\n        </p>\n        <form className=\"Askd-form\" onSubmit={this.resetPassword}>\n          <label htmlFor=\"reset-code\">Code</label>\n          <input autoComplete=\"off\" type=\"text\" name=\"code\"\n                 key=\"reset-code\" id=\"reset-code\" />\n\n          <label htmlFor=\"reset-password\">Password</label>\n          <input autoComplete=\"off\" type=\"password\" name=\"password\"\n                 key=\"reset-password\" id=\"reset-password\" />\n\n          <label htmlFor=\"reset-confirm-password\">Confirm password</label>\n          <input autoComplete=\"off\" type=\"password\" name=\"confirmPassword\"\n                 key=\"reset-confirm-password\" id=\"reset-confirm-password\" />\n\n          <div onClick={this.resendVerificationEmail} className=\"Askd-form-link\">\n            Didn't get the email? Click here to resend\n          </div>\n\n          <input className=\"Askd-button Module-popup-last\" type=\"submit\"\n                 value=\"Submit\" />\n        </form>\n      </div>\n    );\n\n    const recoveryPasswordSuccess= (\n      <div className=\"Register-form Module-popup\">\n        <h2>Password reset success!</h2>\n        <p className=\"Module-popup-last\">\n          Your password has been reset successfully. You'll now be able to\n          login again.\n        </p>\n      </div>\n    );\n\n    var currentForm;\n    switch(this.state.screen) {\n      case HeaderState.LOGIN:\n        currentForm = loginForm;\n        break;\n      case HeaderState.RECOVERY_USERNAME:\n        currentForm = recoveryUsernameForm;\n        break;\n      case HeaderState.RECOVERY_PASSWORD:\n        currentForm = recoveryPasswordForm;\n        break;\n      case HeaderState.RECOVERY_SUCCESS:\n        currentForm = recoveryPasswordSuccess;\n        break;\n      default:\n    }\n\n    return (\n      <div className=\"Module-blocker\">\n        <button onClick={this.close}\n                className=\"Askd-form-close Askd-button Askd-button-circular\">X</button>\n        { currentForm }\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React, { Component } from 'react';\nimport UserProfile from '../UserProfile';\nimport '../css/UserMenu.css'\n\nclass UserMenu extends Component {\n  constructor(props) {\n    super(props);\n\n    this.logout = this.logout.bind(this);\n  }\n\n  async logout() {\n    await UserProfile.logout();\n    await this.props.logoutCallback();\n  }\n\n  render() {\n    return (\n      <div className=\"User-menu\">\n        <ol>\n          <li>Your profile</li>\n          <div className=\"User-menu-divider\"></div>\n          <li>Settings</li>\n          <li onClick={this.logout}>Logout</li>\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default UserMenu;\n","import React, { Component } from 'react';\nimport Utils from '../Utils';\nimport RegisterForm from './RegisterForm';\nimport LoginForm from './LoginForm';\nimport UserMenu from './UserMenu';\nimport UserProfile from '../UserProfile';\nimport '../css/Header.css';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: null,\n      showRegisterForm: false,\n      showLoginForm: false,\n      showUserMenu: false,\n      unverifiedAccountUsername: null,\n      unverifiedAccountDestination: null\n    };\n\n    this.refreshUsername = this.refreshUsername.bind(this);\n    this.toggleRegisterForm = this.toggleRegisterForm.bind(this);\n    this.toggleLoginForm = this.toggleLoginForm.bind(this);\n    this.toggleUserMenu = this.toggleUserMenu.bind(this);\n    this.afterLogin = this.afterLogin.bind(this);\n    this.unverifiedAccount = this.unverifiedAccount.bind(this);\n  }\n\n  async refreshUsername() {\n    const username = await UserProfile.getUsername();\n\n    await Utils.setStatePromise(this, {\n      username: username,\n      showUserMenu: false,\n      unverifiedAccountUsername: null\n    });\n  }\n\n  async componentDidMount() {\n    await this.refreshUsername();\n  }\n\n  async toggleRegisterForm() {\n    await Utils.setStatePromise(this, {\n      showRegisterForm: !this.state.showRegisterForm\n    });\n  }\n\n  async toggleLoginForm() {\n    await Utils.setStatePromise(this, {\n      showLoginForm: !this.state.showLoginForm\n    });\n  }\n\n  async toggleUserMenu() {\n    await Utils.setStatePromise(this, {\n      showUserMenu: !this.state.showUserMenu\n    });\n  }\n\n  async afterLogin(loggedIn) {\n    await this.toggleLoginForm();\n\n    if(loggedIn)\n      await this.refreshUsername();\n  }\n\n  async unverifiedAccount(username, destination) {\n    await Utils.setStatePromise(this, {\n      showLoginForm: false,\n      showRegisterForm: true,\n      unverifiedAccountUsername: username,\n      unverifiedAccountDestination: destination\n    });\n  }\n\n  render() {\n    const loginButtons = (\n      <div className=\"Header-top-right\">\n        <span onClick={this.toggleLoginForm}>Login</span>\n        <span className=\"Header-divider\"></span>\n        <span onClick={this.toggleRegisterForm}>Create an account</span>\n      </div>\n    );\n\n    const loggedInButton = (\n      <div className=\"Header-logged-in\" tabIndex=\"-1\"\n           onBlur={this.toggleUserMenu}>\n        <div className=\"Header-top-right\">\n          <span onClick={this.toggleUserMenu}>{ this.state.username }</span>\n        </div>\n        <div className=\"Header-user-menu\">\n          {\n            this.state.showUserMenu &&\n            <UserMenu logoutCallback={this.refreshUsername} />\n          }\n        </div>\n      </div>\n    );\n\n    const topRightButtons = this.state.username ? loggedInButton : loginButtons;\n\n    return (\n      <div className=\"Header\">\n        {\n          this.state.showRegisterForm &&\n          <RegisterForm exitCallback={this.toggleRegisterForm}\n                        unverifiedAccountUsername=\n                        {this.state.unverifiedAccountUsername}\n                        unverifiedAccountDestination=\n                        {this.state.unverifiedAccountDestination} />\n        }\n        {\n          this.state.showLoginForm &&\n          <LoginForm exitCallback={this.afterLogin}\n                     emailVerificationCallback={this.unverifiedAccount} />\n        }\n        <h1>cp-notes beta</h1>\n        <ul>\n          <li>Home</li>\n        </ul>\n        { topRightButtons }\n        <span className=\"Header-bottom\"></span>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import queryString from 'query-string';\n\nconst API_STORAGE_KEY = 'askdfjlas.github.io';\nconst API_ENDPOINT = 'https://qqmeusmrfk.execute-api.us-east-1.amazonaws.com/prod/';\n\nclass Api {\n  static localStorage = window.localStorage;\n  static problems = JSON.parse(Api.localStorage.getItem(API_STORAGE_KEY)) || {};\n\n  static _updateStorage() {\n    Api.localStorage.setItem(API_STORAGE_KEY, JSON.stringify(Api.problems));\n  }\n\n  static async _getJson(path) {\n    const response = await fetch(API_ENDPOINT + path);\n    return await response.json();\n  }\n\n  static async getProblems(platform) {\n    const options = {\n      'platform': platform\n    };\n\n    var fakeResponse = [];\n    for(var i = 0; i < 10000; i++) {\n      fakeResponse.push({'sk': '' + Math.random(), 'code': '' + Math.random(), 'title': '' + Math.random()});\n    }\n    return fakeResponse;\n\n    const path = `problems?${queryString.stringify(options)}`;\n    return await Api._getJson(path);\n  }\n\n  static addProblem(problem) {\n    const fakeUuid = '' + (new Date()).getTime();\n    Api.problems[fakeUuid] = problem;\n    Api._updateStorage();\n\n    return fakeUuid;\n  }\n}\n\nexport default Api;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\nimport './css/CpProblem.css';\n\nconst SOLVED_CLASS = [\n  'Cp-unsolved',\n  'Cp-solved',\n  'Cp-solved-help'\n];\n\nclass CpProblem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showNotes: false\n    };\n\n    this.toggleNotes = this.toggleNotes.bind(this);\n  }\n\n  toggleNotes() {\n    Utils.setStatePromise(this, {\n      showNotes: !this.state.showNotes\n    });\n  }\n\n  render() {\n    const problem = this.props.problem;\n    const showHide = this.state.showNotes ? 'hide' : 'show';\n\n    return (\n      <div className={`Cp-problem ${SOLVED_CLASS[problem.solved]}`}>\n        <h4>{ `${problem.platform} ${problem.code} - ${problem.title}` }</h4>\n        <p>\n          Problem link: <a href={problem.link}>{problem.link}</a>\n        </p>\n        <p className=\"Cp-problem-toggle\" onClick={this.toggleNotes}>\n          Notes ({ showHide })\n        </p>\n        <p className={`Cp-problem-notes-${showHide}`}>\n          { problem.notes || 'Nothing written here yet!'}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default CpProblem;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\nimport './css/SearchSelect.css';\n\nconst MAX_OPTIONS = 10;\nconst GLOBAL_SORT_KEY = 'sk';\n\nclass SearchSelect extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchTerm: '',\n      previousValidSearchTerm: '',\n      showOptions: true,\n      options: [],\n      filteredOptions: []\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleOptionSelect = this.handleOptionSelect.bind(this);\n  }\n\n  getOptionString(option) {\n    const optionStringArray = [];\n    for(const key of this.props.keys)\n      optionStringArray.push(option[key]);\n\n    return optionStringArray.join(' - ');\n  }\n\n  async componentDidUpdate(prevProps) {\n    if(!this.props.searchKey || this.props.searchKey === prevProps.searchKey)\n      return;\n\n    const options = await this.props.search(this.props.searchKey);\n    await Utils.setStatePromise(this, {\n      options: options,\n      filteredOptions: []\n    });\n  }\n\n  async handleChange(event) {\n    const newSearchTerm = event.target.value.toLowerCase();\n\n    var filteredOptions = [];\n    for(const option of this.state.options) {\n      if(filteredOptions.length === MAX_OPTIONS)\n        break;\n\n      const optionString = this.getOptionString(option);\n      if(optionString.toLowerCase().startsWith(newSearchTerm)) {\n        filteredOptions.push(option);\n        continue;\n      }\n\n      for(const key of this.props.keys) {\n        if(option[key].toLowerCase().startsWith(newSearchTerm)) {\n          filteredOptions.push(option);\n          break;\n        }\n      }\n    }\n\n    await Utils.setStatePromise(this, {\n      searchTerm: newSearchTerm,\n      filteredOptions: filteredOptions\n    });\n  }\n\n  async handleBlur(event) {\n    const focusedElement = event.relatedTarget;\n    if(focusedElement && focusedElement.id === `Select-options-${this.props.name}`)\n      return;\n\n    await Utils.setStatePromise(this, {\n      showOptions: false,\n      searchTerm: this.state.previousValidSearchTerm,\n      filteredOptions: []\n    });\n  }\n\n  async handleFocus(event) {\n    await Utils.setStatePromise(this, {\n      showOptions: true\n    });\n  }\n\n  async handleOptionSelect(sortKey, optionString) {\n    await Utils.setStatePromise(this, {\n      searchTerm: optionString,\n      previousValidSearchTerm: optionString,\n      showOptions: false,\n      filteredOptions: []\n    });\n\n    this.props.callback(sortKey);\n  }\n\n  render() {\n    var optionElements = [];\n    for(const option of this.state.filteredOptions) {\n      const optionString = this.getOptionString(option);\n      const sortKey = option[GLOBAL_SORT_KEY];\n      optionElements.push(\n        <li onClick={() => this.handleOptionSelect(sortKey, optionString)}\n            key={sortKey}>{optionString}</li>\n      );\n    }\n\n    return (\n      <div onBlur={this.handleBlur} className=\"Search-select\">\n        <input onChange={this.handleChange} autoComplete=\"off\" type=\"text\"\n               value={this.state.searchTerm} onFocus={this.handleFocus}\n               name={this.props.name} id={this.props.id} disabled={!this.props.searchKey} />\n        {\n          optionElements.length > 0 && this.state.showOptions &&\n          <ol id={`Select-options-${this.props.name}`} tabIndex=\"-1\"\n              className=\"Search-select-options\">\n            { optionElements }\n          </ol>\n        }\n      </div>\n    );\n  }\n}\n\nexport default SearchSelect;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\nimport SearchSelect from './SearchSelect';\nimport Api from './Api';\nimport './css/CpForm.css';\n\nclass CpForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      platform: null,\n      problemSortKey: null\n    };\n\n    this.close = this.close.bind(this);\n    this.handlePlatformChange = this.handlePlatformChange.bind(this);\n    this.updateProblemSortKey = this.updateProblemSortKey.bind(this);\n    this.addProblem = this.addProblem.bind(this);\n  }\n\n  close() {\n    this.props.callback(null);\n  }\n\n  async handlePlatformChange(event) {\n    await Utils.setStatePromise(this, {\n      platform: event.target.value\n    });\n  }\n\n  async updateProblemSortKey(sortKey) {\n    await Utils.setStatePromise(this, {\n      problemSortKey: sortKey\n    });\n  }\n\n  async addProblem(event) {\n    event.preventDefault();\n\n    const form = event.target;\n    const problem = {\n      title: form.title.value,\n      platform: form.platform.value,\n      link: form.link.value,\n      code: form.code.value,\n      solved: form.solved.value,\n      notes: form.notes.value,\n      sortKey: this.state.problemSortKey\n    };\n\n    await this.props.callback(problem);\n  }\n\n  render() {\n    const disableForm = !this.state.platform;\n\n    return (\n      <div className=\"Module-blocker\">\n        <button onClick={this.close}\n                className=\"Askd-form-close Askd-button Askd-button-circular\">X</button>\n        <div className=\"Cp-form Module-popup\">\n          <form className=\"Askd-form\" onSubmit={this.addProblem}>\n            <label htmlFor=\"cp-platform\">Platform</label>\n            <select defaultValue=\"\" onChange={this.handlePlatformChange} name=\"platform\" id=\"cp-platform\">\n              <option disabled value=\"\"></option>\n              <option value=\"CodeForces\">CodeForces</option>\n              <option value=\"CodeChef\">CodeChef</option>\n            </select>\n\n            <label htmlFor=\"cp-title\">Problem title</label>\n            <SearchSelect name='title' id='cp-title' search={Api.getProblems}\n                          searchKey={this.state.platform} keys={['code', 'title']}\n                          callback={this.updateProblemSortKey} />\n\n            <label htmlFor=\"cp-link\">Problem link</label>\n            <div className=\"Askd-form-inline\">\n              <span>https://</span>\n              <input autoComplete=\"off\" type=\"text\" name=\"link\" id=\"cp-link\"\n                     disabled={disableForm} />\n            </div>\n\n            <label htmlFor=\"cp-code\">Problem code (e.g. 1401E)</label>\n            <input autoComplete=\"off\" type=\"text\" name=\"code\" id=\"cp-code\"\n                   disabled={disableForm} />\n\n            <label htmlFor=\"cp-solved\">Solved?</label>\n            <select name=\"solved\" id=\"cp-solved\" disabled={disableForm}>\n              <option value=\"0\">Unsolved</option>\n              <option value=\"1\">Solved</option>\n              <option value=\"2\">Solved with help</option>\n            </select>\n\n            <label htmlFor=\"cp-math-notes\">Notes</label>\n            <textarea autoComplete=\"off\" name=\"notes\" id=\"cp-math-notes\"\n                      disabled={disableForm} />\n\n            <input className=\"Askd-button Module-popup-last\" type=\"submit\"\n                   value=\"Add\" />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CpForm;\n","import React, { Component } from 'react';\nimport Api from './Api';\nimport CpProblem from './CpProblem';\nimport CpForm from './CpForm';\nimport Utils from './Utils';\nimport './css/CpNotes.css';\n\nclass CpNotes extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      problems: Api.getProblems(),\n      showForm: false\n    };\n\n    this.toggleForm = this.toggleForm.bind(this);\n    this.addProblem = this.addProblem.bind(this);\n  }\n\n  async toggleForm() {\n    await Utils.setStatePromise(this, {\n      showForm: !this.state.showForm\n    });\n  }\n\n  async addProblem(problem) {\n    this.toggleForm();\n\n    if(!problem)\n      return;\n\n    const uuid = Api.addProblem(problem);\n    var updatedProblems = this.state.problems;\n    updatedProblems[uuid] = problem;\n\n    await Utils.setStatePromise(this, {\n      problems: updatedProblems\n    });\n    await window.MathJax.typesetPromise();\n  }\n\n  render() {\n    var problemElements = [];\n    for(const uuid in this.state.problems) {\n      problemElements.push(\n        <CpProblem key={uuid} problem={this.state.problems[uuid]} />\n      );\n    }\n\n    return (\n      <div className=\"Module-wrapper\">\n        <div className=\"Module-description\">\n          <h2>Competitive Programming Notes</h2>\n          <p>It's difficult to keep track of unsolved problems in competitive programming.\n          Personally, I've always tried to maintain a mental queue of these problems in my head,\n          only to later forget about them. This small tool allows you to have this\n          list in your browser's localstorage, and also supports note-taking. Math rendering\n          is done using MathJax! For example, typing \\\\(x \\geq 4\\\\) will produce the following:\n          \\(x \\geq 4\\)</p>\n        </div>\n        <div className=\"Cp-notes Module-space\">\n          {\n            Utils.isEmpty(this.state.problems) ?\n              <p className=\"Cp-notes-none\">It looks like you haven't added any problems yet.\n              Click the '+' button in the bottom-right to add one.</p> :\n              problemElements\n          }\n          {\n            this.state.showForm && <CpForm callback={this.addProblem} />\n          }\n          <button onClick={this.toggleForm}\n                  className=\"Cp-notes-add Askd-button Askd-button-circular\">\n                  +\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CpNotes;\n","import React from 'react';\nimport Header from './Header/Header';\nimport CpNotes from './CpNotes';\nimport './css/App.css';\nimport './css/Module.css';\nimport './css/Form.css';\nimport './fonts/fonts.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CpNotes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Amplify from 'aws-amplify';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport amplify_config from './amplify_config';\n\nAmplify.configure(amplify_config);\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}