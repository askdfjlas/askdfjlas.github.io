{"version":3,"sources":["Header.js","Api.js","Utils.js","CpProblem.js","CpForm.js","CpNotes.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Api","localStorage","setItem","JSON","stringify","problems","problem","fakeUuid","Date","getTime","_updateStorage","window","parse","getItem","Utils","component","stateObject","Promise","resolve","reject","setState","object","property","hasOwnProperty","SOLVED_CLASS","CpProblem","props","state","showNotes","toggleNotes","bind","setStatePromise","this","showHide","solved","platform","code","title","href","link","onClick","notes","Component","CpForm","close","addProblem","callback","event","preventDefault","form","target","value","onSubmit","htmlFor","autoComplete","type","name","id","CpNotes","getProblems","showForm","toggleForm","uuid","updatedProblems","MathJax","typesetPromise","problemElements","push","key","isEmpty","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdf4d4ee.chunk.js","sourcesContent":["import React from 'react';\nimport './css/Header.css';\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h1>askdfjlas</h1>\n      <ul>\n        <li>CP Notes</li>\n      </ul>\n      <span></span>\n    </div>\n  );\n}\n\nexport default Header;\n","const API_STORAGE_KEY = 'askdfjlas.github.io';\n\nclass Api {\n  static localStorage = window.localStorage;\n  static problems = JSON.parse(Api.localStorage.getItem(API_STORAGE_KEY)) || {};\n\n  static _updateStorage() {\n    Api.localStorage.setItem(API_STORAGE_KEY, JSON.stringify(Api.problems));\n  }\n\n  static getProblems() {\n    return Api.problems;\n  }\n\n  static addProblem(problem) {\n    const fakeUuid = '' + (new Date()).getTime();\n    Api.problems[fakeUuid] = problem;\n    Api._updateStorage();\n\n    return fakeUuid;\n  }\n}\n\nexport default Api;\n","class Utils {\n  static async setStatePromise(component, stateObject) {\n    return new Promise((resolve, reject) => {\n      component.setState(stateObject, () => {\n        resolve();\n      });\n    });\n  }\n\n  static isEmpty(object) {\n    for(const property in object) {\n      if(object.hasOwnProperty(property))\n        return false;\n    }\n    return true;\n  }\n}\n\nexport default Utils;\n","import React, { Component } from 'react';\nimport Utils from './Utils';\nimport './css/CpProblem.css';\n\nconst SOLVED_CLASS = [\n  'Cp-unsolved',\n  'Cp-solved',\n  'Cp-solved-help'\n];\n\nclass CpProblem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showNotes: false\n    };\n\n    this.toggleNotes = this.toggleNotes.bind(this);\n  }\n\n  toggleNotes() {\n    Utils.setStatePromise(this, {\n      showNotes: !this.state.showNotes\n    });\n  }\n\n  render() {\n    const problem = this.props.problem;\n    const showHide = this.state.showNotes ? 'hide' : 'show';\n\n    return (\n      <div className={`Cp-problem ${SOLVED_CLASS[problem.solved]}`}>\n        <h4>{ `${problem.platform} ${problem.code} - ${problem.title}` }</h4>\n        <p>\n          Problem link: <a href={problem.link}>{problem.link}</a>\n        </p>\n        <p className=\"Cp-problem-toggle\" onClick={this.toggleNotes}>\n          Notes ({ showHide })\n        </p>\n        <p className={`Cp-problem-notes-${showHide}`}>\n          { problem.notes || 'Nothing written here yet!'}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default CpProblem;\n","import React, { Component } from 'react';\nimport './css/CpForm.css';\n\nclass CpForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.close = this.close.bind(this);\n    this.addProblem = this.addProblem.bind(this);\n  }\n\n  close() {\n    this.props.callback(null);\n  }\n\n  async addProblem(event) {\n    event.preventDefault();\n\n    const form = event.target;\n    const problem = {\n      title: form.title.value,\n      platform: form.platform.value,\n      link: form.link.value,\n      code: form.code.value,\n      solved: form.solved.value,\n      notes: form.notes.value\n    };\n\n    await this.props.callback(problem);\n  }\n\n  render() {\n    return (\n      <div className=\"Module-blocker\">\n        <button onClick={this.close}\n                className=\"Cp-form-close Askd-button Askd-button-circular\">X</button>\n        <div className=\"Cp-form\">\n          <form className=\"Askd-form\" onSubmit={this.addProblem}>\n            <label className=\"Askd-form-required\" htmlFor=\"cp-title\">Problem title</label>\n            <input autoComplete=\"off\" type=\"text\" name=\"title\" id=\"cp-title\" />\n\n            <label htmlFor=\"cp-platform\">Platform (e.g. CodeForces)</label>\n            <input autoComplete=\"off\" type=\"text\" name=\"platform\" id=\"cp-platform\" />\n\n            <label htmlFor=\"cp-link\">Problem link</label>\n            <div className=\"Askd-form-inline\">\n              <span>https://</span>\n              <input autoComplete=\"off\" type=\"text\" name=\"link\" id=\"cp-link\" />\n            </div>\n\n            <label htmlFor=\"cp-code\">Problem code (e.g. 1401E)</label>\n            <input autoComplete=\"off\" type=\"text\" name=\"code\" id=\"cp-code\" />\n\n            <label htmlFor=\"cp-solved\">Solved?</label>\n            <select name=\"solved\" id=\"cp-solved\">\n              <option value=\"0\">Unsolved</option>\n              <option value=\"1\">Solved</option>\n              <option value=\"2\">Solved with help</option>\n            </select>\n\n            <label htmlFor=\"cp-math-notes\">Notes</label>\n            <textarea autoComplete=\"off\" name=\"notes\" id=\"cp-math-notes\" />\n\n            <input className=\"Askd-button\" type=\"submit\" value=\"Add\" />\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CpForm;\n","import React, { Component } from 'react';\nimport Api from './Api';\nimport CpProblem from './CpProblem';\nimport CpForm from './CpForm';\nimport Utils from './Utils';\nimport './css/CpNotes.css';\n\nclass CpNotes extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      problems: Api.getProblems(),\n      showForm: false\n    };\n\n    this.toggleForm = this.toggleForm.bind(this);\n    this.addProblem = this.addProblem.bind(this);\n  }\n\n  toggleForm() {\n    Utils.setStatePromise(this, {\n      showForm: !this.state.showForm\n    });\n  }\n\n  async addProblem(problem) {\n    this.toggleForm();\n\n    if(!problem)\n      return;\n\n    const uuid = Api.addProblem(problem);\n    var updatedProblems = this.state.problems;\n    updatedProblems[uuid] = problem;\n\n    await Utils.setStatePromise(this, {\n      problems: updatedProblems\n    });\n    await window.MathJax.typesetPromise();\n  }\n\n  render() {\n    var problemElements = [];\n    for(const uuid in this.state.problems) {\n      problemElements.push(\n        <CpProblem key={uuid} problem={this.state.problems[uuid]} />\n      );\n    }\n\n    return (\n      <div className=\"Module-wrapper\">\n        <div className=\"Module-description\">\n          <h2>Competitive Programming Notes</h2>\n          <p>It's difficult to keep track of unsolved problems in competitive programming.\n          Personally, I've always tried to maintain a mental queue of these problems in my head,\n          only to later forget about them. This small tool allows you to have this\n          list in your browser's localstorage, and also supports note-taking. Math rendering\n          is done using MathJax! For example, typing \\\\(x \\geq 4\\\\) will produce the following:\n          \\(x \\geq 4\\)</p>\n        </div>\n        <div className=\"Cp-notes Module-space\">\n          {\n            Utils.isEmpty(this.state.problems) ?\n              <p className=\"Cp-notes-none\">It looks like you haven't added any problems yet.\n              Click the '+' button in the bottom-right to add one.</p> :\n              problemElements\n          }\n          {\n            this.state.showForm && <CpForm callback={this.addProblem} />\n          }\n          <button onClick={this.toggleForm}\n                  className=\"Cp-notes-add Askd-button Askd-button-circular\">\n                  +\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CpNotes;\n","import React from 'react';\nimport Header from './Header';\nimport CpNotes from './CpNotes';\nimport './css/App.css';\nimport './css/Module.css';\nimport './css/Form.css';\nimport './fonts/fonts.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CpNotes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}